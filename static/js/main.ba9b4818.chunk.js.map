{"version":3,"sources":["components/SiteHead/index.js","components/Card/index.js","components/ListRow/index.js","components/SearchBar/index.js","App.js","serviceWorker.js","index.js"],"names":["SiteHead","className","Card","props","alt","last","src","image","title","first","gender","age","phone","email","ListHeader","state","alphabetical","ascending","sortedEmployees","employees","sortName","sortEmp","empList","sort","a","b","nameA","name","toLowerCase","nameB","setState","sortAge","dob","filterGender","filteredGender","filter","employee","console","log","this","length","prevProps","onClick","map","item","index","picture","large","cell","React","Component","Navbar","searchTerm","filteredEmployees","handleInputChange","event","target","value","userTyped","filteredList","indexOf","onChange","type","placeholder","ListRow","App","axios","get","then","res","data","results","SearchBar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba9b4818.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction SiteHead() {\n    return (\n<div className = \"wrapper\">\n    <div className = \"title\">\nEMPLOYEE DIRECTORY: Search for an Employee\n    </div>\n    <br></br>\n    <div className = \"tagline\">\nFind Local Employees\n    </div>\n</div>\n\n    );\n}\n\nexport default SiteHead;","import React from \"react\";\nimport \"../Card/style.css\";\n\nfunction Card(props) {\n    return (\n\n        <div className=\"card\">\n            <div><img alt={props.last} src={props.image}></img></div>\n            <div>{props.title} {props.first} {props.last} </div>\n            <div>{props.gender}</div>\n            <div>{props.age}</div>\n            <div>{props.phone}</div>\n            <div>{props.email}</div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\nimport Card from '../Card';\n\nclass ListHeader extends React.Component {\n\n    state = {\n        alphabetical: true,\n        ascending: true,\n        sortedEmployees: [],\n        employees: []\n    }\n\n    componentDidMount() {\n        if (this.state.sortedEmployees.length < 1) {\n            this.setState({\n                sortedEmployees: this.props.empList\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.empList !== prevProps.empList) {\n            this.setState({\n                sortedEmployees: this.props.empList\n            })\n        }\n    }\n\n    sortName = () => {\n        let sortEmp = [];\n        if (this.state.alphabetical) {\n            sortEmp = this.props.empList.sort((a, b) => {\n                var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\n                if (nameA < nameB)\n                    return -1\n                if (nameA > nameB)\n                    return 1\n                return 0\n            })\n        } else {\n            sortEmp = this.props.empList.sort((a, b) => {\n                var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\n                if (nameA > nameB)\n                    return -1\n                if (nameA < nameB)\n                    return 1\n                return 0\n            })\n        }\n        this.setState({\n            alphabetical: !this.state.alphabetical,\n            sortedEmployees: sortEmp\n\n        })\n    }\n\n    sortAge = () => {\n        let sortEmp = [];\n        if (this.state.ascending) {\n            sortEmp = this.props.empList.sort((a, b) => {\n                var nameA = a.dob.age, nameB = b.dob.age;\n                if (nameA < nameB)\n                    return -1\n                if (nameA > nameB)\n                    return 1\n                return 0\n            })\n        } else {\n            sortEmp = this.props.empList.sort((a, b) => {\n                var nameA = a.dob.age, nameB = b.dob.age;\n                if (nameA > nameB)\n                    return -1\n                if (nameA < nameB)\n                    return 1\n                return 0\n            })\n        }\n        this.setState({\n            ascending: !this.state.ascending,\n            sortedEmployees: sortEmp\n\n        })\n    }\n\n    // function cmp($a, $b) {\n    //     if ($a['gender'] == $b['gender']) {\n    //         return 0;\n    //     }\n    //     return ($a['gender'] < $b['gender']) ? -1 : 1;\n    // }\n    \n    // usort($array, \"cmp\");\n\n\n    \n        // sortGender = gender => {\n        //     let sortEmp = [];\n        // if (this.state.ascending) {\n        //     sortEmp = this.props.empList.sort((a, b) => {\n        //     var nameA = a.gender.male.toLowerCase(), nameB = b.gender.female.toLowerCase();\n        //     // var filteredGender = this.state.list.filter(\n        //     //   employees => employees.gender.toLowerCase() === gender\n        //     // );\n        //     if (nameA === nameB)\n        //             return -1\n        //         if (nameA === nameB)\n        //             return 1\n        //         return 0\n        //     })\n        // } else {\n        //     sortEmp = this.props.empList.sort((a, b) => {\n        //         var nameA = a.gender.male.toLowerCase(), nameB = b.gender.female.toLowerCase();\n        //         if (nameA > nameB)\n        //             return -1\n        //         if (nameA < nameB)\n        //             return 1\n        //         return 0\n        //     })\n        //     // this.setState({ list: nameA, nameB }, () => console.log(this.state.list));\n        // //   })\n        // }\n\n        filterGender = gender => {\n            const filteredGender = this.state.sortedEmployees.filter(\n              employee => employee.gender.toLowerCase() === gender\n            );\n        \n            this.setState({ sortedEmployees: filteredGender }, () => console.log(this.state.sortedEmployees));\n          };\n        //   this.setState({\n        // //     ascending: !this.state.ascending,\n        // //     sortedEmployees: sortEmp\n\n        // })\n    // };\n\n        // sortGender = () => {\n        // let sortEmp = [];\n        // if (this.state.ascending) {\n        //     sortEmp = this.props.empList.sort((a, b) => {\n        //         var nameA = a.dob.gender, nameB = b.dob.gender;\n        //         if (nameA['gender'] === nameB['gender'])\n        //             return (nameA['gender'] < nameB['gender']) ? -1 : 1;\n        //     })\n        // }\n        \n        // this.setState({\n        //     ascending: !this.state.ascending,\n        //     sortedEmployees: sortEmp\n\n    //     }\n    // };\n\n\n\n    render() {\n        return (\n\n            <div>\n                <div className=\"header\">\n                    <div>Photo</div>\n                    <div><p onClick={this.sortName} className=\"name\">Name</p> </div>\n                    {/* <div><p onClick={this.sortGender} className=\"gender\">Gender</p> </div> */}\n                    <div><p onClick={() => this.filterGender(\"female\", \"male\" )} className=\"gender\">Gender</p> </div>\n                    {/* <div><p onClick={() => this.filterGender(\"female\")}>Gender</p> </div> */}\n                    <div><p onClick={this.sortAge} className=\"age\">Age</p></div>\n                    <div>Phone</div>\n                    <div>E-mail</div>\n                </div>\n\n                {\n                    this.state.sortedEmployees.length > 0 &&\n                    this.state.sortedEmployees.map((item, index) => (\n\n                            <Card\n                                image={item.picture.large}\n                                first={item.name.first}\n                                last={item.name.last}\n                                title={item.name.title}\n                                gender={item.gender}\n                                age={item.dob.age}\n                                phone={item.cell}\n                                email={item.email}\n                            />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default ListHeader;","import React from \"react\";\nimport \"./style.css\";\nimport ListRow from '../ListRow';\n\nclass Navbar extends React.Component {\n\n    state = {\n        searchTerm: \"\",\n        filteredEmployees: []\n    };\n\n    componentDidMount() {\n        if (this.state.filteredEmployees.length < 1) {\n            this.setState({\n                filteredEmployees: this.props.employees\n            })\n        }\n    }\n\n\n    handleInputChange = event => {\n        this.setState({\n            searchTerm: event.target.value\n        });\n        let userTyped = event.target.value;\n        const filteredList = this.props.employees.filter((item) => {\n            let values = item.name.title + item.name.first + item.name.last + item.gender + item.dob.age + item.email + item.cell;\n            return values.indexOf(userTyped) !== -1;\n\n        });\n\n        this.setState({\n            filteredEmployees: filteredList\n\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {/* {this.fillList} */}\n                <form className=\"form\">\n                    <input\n                        value={this.state.searchTerm}\n                        name=\"searchTerm\"\n                        onChange={event => this.handleInputChange(event)}\n                        type=\"text\"\n                        placeholder=\"Search\"\n                    />\n                </form>\n                {this.state.filteredEmployees.length > 0 &&\n                    <ListRow empList={this.state.filteredEmployees} />\n                }\n            </div>\n\n        );\n    }\n}\n\n\nexport default Navbar;","// import React from \"react\";\n// import OmdbContainer from \"./components/OmdbContainer\";\n\n// function App() {\n//   return <OmdbContainer />;\n// }\n\n// export default App;\n\nimport React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport SiteHead from './components/SiteHead';\nimport SearchBar from './components/SearchBar';\n\n\nclass App extends React.Component {\n\n  state = {\n    employees: [],\n  };\n\n  componentDidMount() {\n      axios.get(`https://randomuser.me/api/?results=20&nat=Aus`)\n        .then(res => {\n          this.setState({ employees: res.data.results });\n        });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SiteHead />\n        {this.state.employees.length > 0 &&\n        <SearchBar employees={this.state.employees}/>\n  }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}